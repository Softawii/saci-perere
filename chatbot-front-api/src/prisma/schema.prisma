datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model user {
    id                   Int                      @id @default(autoincrement())
    username             String                   @unique
    password             String
    name                 String
    email                String                   @unique
    isadmin              Boolean?
    favorites_categories user_category_favorite[]
    favorites_topics     user_topic_favorite[]
}

model topic {
    id          Int                   @id @default(autoincrement())
    name        String                @unique
    description String?
    categories  category[]
    favorites   user_topic_favorite[]
}

model category {
    id          Int                      @id @default(autoincrement())
    name        String                   @unique
    description String?
    topic_id    Int
    topic       topic                    @relation(fields: [topic_id], references: [id])
    favorites   user_category_favorite[]
    questions   question[]
}

model user_topic_favorite {
    user_id  Int
    topic_id Int
    user     user  @relation(fields: [user_id], references: [id])
    topic    topic @relation(fields: [topic_id], references: [id])

    @@id([user_id, topic_id])
}

model user_category_favorite {
    user_id     Int
    category_id Int
    user        user     @relation(fields: [user_id], references: [id])
    category    category @relation(fields: [category_id], references: [id])

    @@id([user_id, category_id])
}

model answer {
    id        Int        @id @default(autoincrement())
    value     String
    questions question[]
}

model question {
    id               Int                @id @default(autoincrement())
    category_id      Int
    answer_id        Int
    value            String
    category         category           @relation(fields: [category_id], references: [id])
    answer           answer             @relation(fields: [answer_id], references: [id])
    unknown_question unknown_question[]
    history          history[]
}

model unknown_question {
    id                    Int       @id @default(autoincrement())
    user_question         String
    predicted_question_id Int?
    predicted_score       Float
    question              question? @relation(fields: [predicted_question_id], references: [id])
}

model platform {
    id      Int       @id @default(autoincrement())
    name    String
    history history[]
}

model history {
    id                Int        @id @default(autoincrement())
    time              DateTime   @db.Timestamptz
    user_question     String
    found_question_id Int?
    platform_id       Int?
    platform          platform?  @relation(fields: [platform_id], references: [id])
    question          question?  @relation(fields: [found_question_id], references: [id])
    feedback          feedback[]
}

model feedback {
    id            Int     @id @default(autoincrement())
    history_id    Int
    status        Int
    user_feedback String?
    history       history @relation(fields: [history_id], references: [id])
}
